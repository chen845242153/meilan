package com.meilancycling.mema.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.meilancycling.mema.db.PowerZoneEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POWER_ZONE_ENTITY".
*/
public class PowerZoneEntityDao extends AbstractDao<PowerZoneEntity, Long> {

    public static final String TABLENAME = "POWER_ZONE_ENTITY";

    /**
     * Properties of entity PowerZoneEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Value = new Property(2, int.class, "value", false, "VALUE");
        public final static Property ZoneValue1 = new Property(3, int.class, "zoneValue1", false, "ZONE_VALUE1");
        public final static Property ZoneValue2 = new Property(4, int.class, "zoneValue2", false, "ZONE_VALUE2");
        public final static Property ZoneValue3 = new Property(5, int.class, "zoneValue3", false, "ZONE_VALUE3");
        public final static Property ZoneValue4 = new Property(6, int.class, "zoneValue4", false, "ZONE_VALUE4");
        public final static Property ZoneValue5 = new Property(7, int.class, "zoneValue5", false, "ZONE_VALUE5");
        public final static Property ZoneValue6 = new Property(8, int.class, "zoneValue6", false, "ZONE_VALUE6");
        public final static Property ZoneValue7 = new Property(9, int.class, "zoneValue7", false, "ZONE_VALUE7");
    }


    public PowerZoneEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PowerZoneEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POWER_ZONE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"VALUE\" INTEGER NOT NULL ," + // 2: value
                "\"ZONE_VALUE1\" INTEGER NOT NULL ," + // 3: zoneValue1
                "\"ZONE_VALUE2\" INTEGER NOT NULL ," + // 4: zoneValue2
                "\"ZONE_VALUE3\" INTEGER NOT NULL ," + // 5: zoneValue3
                "\"ZONE_VALUE4\" INTEGER NOT NULL ," + // 6: zoneValue4
                "\"ZONE_VALUE5\" INTEGER NOT NULL ," + // 7: zoneValue5
                "\"ZONE_VALUE6\" INTEGER NOT NULL ," + // 8: zoneValue6
                "\"ZONE_VALUE7\" INTEGER NOT NULL );"); // 9: zoneValue7
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POWER_ZONE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PowerZoneEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getValue());
        stmt.bindLong(4, entity.getZoneValue1());
        stmt.bindLong(5, entity.getZoneValue2());
        stmt.bindLong(6, entity.getZoneValue3());
        stmt.bindLong(7, entity.getZoneValue4());
        stmt.bindLong(8, entity.getZoneValue5());
        stmt.bindLong(9, entity.getZoneValue6());
        stmt.bindLong(10, entity.getZoneValue7());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PowerZoneEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getValue());
        stmt.bindLong(4, entity.getZoneValue1());
        stmt.bindLong(5, entity.getZoneValue2());
        stmt.bindLong(6, entity.getZoneValue3());
        stmt.bindLong(7, entity.getZoneValue4());
        stmt.bindLong(8, entity.getZoneValue5());
        stmt.bindLong(9, entity.getZoneValue6());
        stmt.bindLong(10, entity.getZoneValue7());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PowerZoneEntity readEntity(Cursor cursor, int offset) {
        PowerZoneEntity entity = new PowerZoneEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getInt(offset + 2), // value
            cursor.getInt(offset + 3), // zoneValue1
            cursor.getInt(offset + 4), // zoneValue2
            cursor.getInt(offset + 5), // zoneValue3
            cursor.getInt(offset + 6), // zoneValue4
            cursor.getInt(offset + 7), // zoneValue5
            cursor.getInt(offset + 8), // zoneValue6
            cursor.getInt(offset + 9) // zoneValue7
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PowerZoneEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setValue(cursor.getInt(offset + 2));
        entity.setZoneValue1(cursor.getInt(offset + 3));
        entity.setZoneValue2(cursor.getInt(offset + 4));
        entity.setZoneValue3(cursor.getInt(offset + 5));
        entity.setZoneValue4(cursor.getInt(offset + 6));
        entity.setZoneValue5(cursor.getInt(offset + 7));
        entity.setZoneValue6(cursor.getInt(offset + 8));
        entity.setZoneValue7(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PowerZoneEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PowerZoneEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PowerZoneEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
