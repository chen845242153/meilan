package com.meilancycling.mema.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.meilancycling.mema.db.UserInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_ENTITY".
*/
public class UserInfoEntityDao extends AbstractDao<UserInfoEntity, Long> {

    public static final String TABLENAME = "USER_INFO_ENTITY";

    /**
     * Properties of entity UserInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Session = new Property(2, String.class, "session", false, "SESSION");
        public final static Property UserCode = new Property(3, int.class, "userCode", false, "USER_CODE");
        public final static Property RegType = new Property(4, int.class, "regType", false, "REG_TYPE");
        public final static Property Nickname = new Property(5, String.class, "nickname", false, "NICKNAME");
        public final static Property HeadUrl = new Property(6, String.class, "headUrl", false, "HEAD_URL");
        public final static Property Gender = new Property(7, int.class, "gender", false, "GENDER");
        public final static Property Height = new Property(8, int.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(9, int.class, "weight", false, "WEIGHT");
        public final static Property Birthday = new Property(10, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Mail = new Property(11, String.class, "mail", false, "MAIL");
        public final static Property Phone = new Property(12, String.class, "phone", false, "PHONE");
        public final static Property Unit = new Property(13, int.class, "unit", false, "UNIT");
        public final static Property Country = new Property(14, String.class, "country", false, "COUNTRY");
        public final static Property DistanceTarget = new Property(15, int.class, "distanceTarget", false, "DISTANCE_TARGET");
        public final static Property TimeTarget = new Property(16, int.class, "timeTarget", false, "TIME_TARGET");
        public final static Property CalTarget = new Property(17, int.class, "calTarget", false, "CAL_TARGET");
        public final static Property GuideFlag = new Property(18, int.class, "guideFlag", false, "GUIDE_FLAG");
    }


    public UserInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"SESSION\" TEXT," + // 2: session
                "\"USER_CODE\" INTEGER NOT NULL ," + // 3: userCode
                "\"REG_TYPE\" INTEGER NOT NULL ," + // 4: regType
                "\"NICKNAME\" TEXT," + // 5: nickname
                "\"HEAD_URL\" TEXT," + // 6: headUrl
                "\"GENDER\" INTEGER NOT NULL ," + // 7: gender
                "\"HEIGHT\" INTEGER NOT NULL ," + // 8: height
                "\"WEIGHT\" INTEGER NOT NULL ," + // 9: weight
                "\"BIRTHDAY\" TEXT," + // 10: birthday
                "\"MAIL\" TEXT," + // 11: mail
                "\"PHONE\" TEXT," + // 12: phone
                "\"UNIT\" INTEGER NOT NULL ," + // 13: unit
                "\"COUNTRY\" TEXT," + // 14: country
                "\"DISTANCE_TARGET\" INTEGER NOT NULL ," + // 15: distanceTarget
                "\"TIME_TARGET\" INTEGER NOT NULL ," + // 16: timeTarget
                "\"CAL_TARGET\" INTEGER NOT NULL ," + // 17: calTarget
                "\"GUIDE_FLAG\" INTEGER NOT NULL );"); // 18: guideFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String session = entity.getSession();
        if (session != null) {
            stmt.bindString(3, session);
        }
        stmt.bindLong(4, entity.getUserCode());
        stmt.bindLong(5, entity.getRegType());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(7, headUrl);
        }
        stmt.bindLong(8, entity.getGender());
        stmt.bindLong(9, entity.getHeight());
        stmt.bindLong(10, entity.getWeight());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(12, mail);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(13, phone);
        }
        stmt.bindLong(14, entity.getUnit());
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(15, country);
        }
        stmt.bindLong(16, entity.getDistanceTarget());
        stmt.bindLong(17, entity.getTimeTarget());
        stmt.bindLong(18, entity.getCalTarget());
        stmt.bindLong(19, entity.getGuideFlag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String session = entity.getSession();
        if (session != null) {
            stmt.bindString(3, session);
        }
        stmt.bindLong(4, entity.getUserCode());
        stmt.bindLong(5, entity.getRegType());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(7, headUrl);
        }
        stmt.bindLong(8, entity.getGender());
        stmt.bindLong(9, entity.getHeight());
        stmt.bindLong(10, entity.getWeight());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(12, mail);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(13, phone);
        }
        stmt.bindLong(14, entity.getUnit());
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(15, country);
        }
        stmt.bindLong(16, entity.getDistanceTarget());
        stmt.bindLong(17, entity.getTimeTarget());
        stmt.bindLong(18, entity.getCalTarget());
        stmt.bindLong(19, entity.getGuideFlag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfoEntity readEntity(Cursor cursor, int offset) {
        UserInfoEntity entity = new UserInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // session
            cursor.getInt(offset + 3), // userCode
            cursor.getInt(offset + 4), // regType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // headUrl
            cursor.getInt(offset + 7), // gender
            cursor.getInt(offset + 8), // height
            cursor.getInt(offset + 9), // weight
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // birthday
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // mail
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // phone
            cursor.getInt(offset + 13), // unit
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // country
            cursor.getInt(offset + 15), // distanceTarget
            cursor.getInt(offset + 16), // timeTarget
            cursor.getInt(offset + 17), // calTarget
            cursor.getInt(offset + 18) // guideFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setSession(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserCode(cursor.getInt(offset + 3));
        entity.setRegType(cursor.getInt(offset + 4));
        entity.setNickname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHeadUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGender(cursor.getInt(offset + 7));
        entity.setHeight(cursor.getInt(offset + 8));
        entity.setWeight(cursor.getInt(offset + 9));
        entity.setBirthday(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhone(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUnit(cursor.getInt(offset + 13));
        entity.setCountry(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDistanceTarget(cursor.getInt(offset + 15));
        entity.setTimeTarget(cursor.getInt(offset + 16));
        entity.setCalTarget(cursor.getInt(offset + 17));
        entity.setGuideFlag(cursor.getInt(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
