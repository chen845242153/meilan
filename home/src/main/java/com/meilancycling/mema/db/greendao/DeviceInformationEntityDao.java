package com.meilancycling.mema.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.meilancycling.mema.db.DeviceInformationEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_INFORMATION_ENTITY".
*/
public class DeviceInformationEntityDao extends AbstractDao<DeviceInformationEntity, Long> {

    public static final String TABLENAME = "DEVICE_INFORMATION_ENTITY";

    /**
     * Properties of entity DeviceInformationEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property MacAddress = new Property(2, String.class, "macAddress", false, "MAC_ADDRESS");
        public final static Property ProductNo = new Property(3, String.class, "productNo", false, "PRODUCT_NO");
        public final static Property DeleteSwitch = new Property(4, int.class, "deleteSwitch", false, "DELETE_SWITCH");
        public final static Property DeviceUpdate = new Property(5, int.class, "deviceUpdate", false, "DEVICE_UPDATE");
        public final static Property DeviceSerialNumber = new Property(6, int.class, "deviceSerialNumber", false, "DEVICE_SERIAL_NUMBER");
        public final static Property ShowTime = new Property(7, long.class, "showTime", false, "SHOW_TIME");
        public final static Property MessageCh = new Property(8, String.class, "messageCh", false, "MESSAGE_CH");
        public final static Property MessageEn = new Property(9, String.class, "messageEn", false, "MESSAGE_EN");
        public final static Property OtaUrl = new Property(10, String.class, "otaUrl", false, "OTA_URL");
    }


    public DeviceInformationEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceInformationEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_INFORMATION_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"MAC_ADDRESS\" TEXT," + // 2: macAddress
                "\"PRODUCT_NO\" TEXT," + // 3: productNo
                "\"DELETE_SWITCH\" INTEGER NOT NULL ," + // 4: deleteSwitch
                "\"DEVICE_UPDATE\" INTEGER NOT NULL ," + // 5: deviceUpdate
                "\"DEVICE_SERIAL_NUMBER\" INTEGER NOT NULL ," + // 6: deviceSerialNumber
                "\"SHOW_TIME\" INTEGER NOT NULL ," + // 7: showTime
                "\"MESSAGE_CH\" TEXT," + // 8: messageCh
                "\"MESSAGE_EN\" TEXT," + // 9: messageEn
                "\"OTA_URL\" TEXT);"); // 10: otaUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_INFORMATION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceInformationEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(3, macAddress);
        }
 
        String productNo = entity.getProductNo();
        if (productNo != null) {
            stmt.bindString(4, productNo);
        }
        stmt.bindLong(5, entity.getDeleteSwitch());
        stmt.bindLong(6, entity.getDeviceUpdate());
        stmt.bindLong(7, entity.getDeviceSerialNumber());
        stmt.bindLong(8, entity.getShowTime());
 
        String messageCh = entity.getMessageCh();
        if (messageCh != null) {
            stmt.bindString(9, messageCh);
        }
 
        String messageEn = entity.getMessageEn();
        if (messageEn != null) {
            stmt.bindString(10, messageEn);
        }
 
        String otaUrl = entity.getOtaUrl();
        if (otaUrl != null) {
            stmt.bindString(11, otaUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceInformationEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(3, macAddress);
        }
 
        String productNo = entity.getProductNo();
        if (productNo != null) {
            stmt.bindString(4, productNo);
        }
        stmt.bindLong(5, entity.getDeleteSwitch());
        stmt.bindLong(6, entity.getDeviceUpdate());
        stmt.bindLong(7, entity.getDeviceSerialNumber());
        stmt.bindLong(8, entity.getShowTime());
 
        String messageCh = entity.getMessageCh();
        if (messageCh != null) {
            stmt.bindString(9, messageCh);
        }
 
        String messageEn = entity.getMessageEn();
        if (messageEn != null) {
            stmt.bindString(10, messageEn);
        }
 
        String otaUrl = entity.getOtaUrl();
        if (otaUrl != null) {
            stmt.bindString(11, otaUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceInformationEntity readEntity(Cursor cursor, int offset) {
        DeviceInformationEntity entity = new DeviceInformationEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // macAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productNo
            cursor.getInt(offset + 4), // deleteSwitch
            cursor.getInt(offset + 5), // deviceUpdate
            cursor.getInt(offset + 6), // deviceSerialNumber
            cursor.getLong(offset + 7), // showTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // messageCh
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // messageEn
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // otaUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceInformationEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setMacAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeleteSwitch(cursor.getInt(offset + 4));
        entity.setDeviceUpdate(cursor.getInt(offset + 5));
        entity.setDeviceSerialNumber(cursor.getInt(offset + 6));
        entity.setShowTime(cursor.getLong(offset + 7));
        entity.setMessageCh(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMessageEn(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOtaUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceInformationEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceInformationEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceInformationEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
